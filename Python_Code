
import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn
import itertools
from itertools import combinations
import time
%matplotlib inline

#------------------------------------------------------------
#Read table
df = pd.read_excel("Test Data.xlsx") 

#define independent variables
#This needs to be all the variables in the table based on user selection
variables = ["Production","CDD","HDD"]

#find all combinations of the independent variables as list of lists 
variables_list = []
for i in range(1,len(variables)+1):
    
    variables_tuples = list(itertools.combinations(variables, i))
    
    temp_list = []
    
    temp_list = [list(elem) for elem in variables_tuples]
    
    variables_list = variables_list + temp_list
    
#-------------------------------------------------------------    
df_results = pd.DataFrame(df.loc[0:len(df)], columns=['Date'])

#Regression table for electricity 
rows = len(df.index)-1
col= len(variables_list)
for i in range(0,col):
    result=[]
    
    if len(variables_list[i]) == 1:
        v1 = variables_list[i][0]
        result_title = ['Date',"R-Square"+str(i), "Intercept"+str(i),str(v1)+"Co-eff"+str(i),str(v1)+"p-value"+str(i)]

        for j in range(0,rows-12):

            #choose electricity and the variables
            electricity=df["Elect (MMBTU)"][j:j+12]
            var = df[variables_list[i]][j:j+12] 
            var = sm.add_constant(var)  
            model = sm.OLS(electricity,var).fit()
            predictions = model.predict(var)
            result.append([df["Date"].iloc[j],model.rsquared,model.params['const'],model.params[v1],model.pvalues[v1]])
            df_temp = pd.DataFrame(data=result, columns=result_title) 
        df_results = pd.merge(df_results, df_temp, on='Date')
    
    else:
        if len(variables_list[i]) == 2:
            v1 = variables_list[i][0]
            v2 = variables_list[i][1]
            result_title = ['Date',"R-Square"+str(i), "Intercept"+str(i),str(v1)+"Co-eff"+str(i),str(v1)+"p-value"+str(i),str(v2)+"Co-eff"+str(i),str(v2)+"p-value"+str(i)]

            for j in range(0,rows-12):

                #choose electricity and the variables
                electricity=df["Elect (MMBTU)"][j:j+12]
                var = df[variables_list[i]][j:j+12] 
                var = sm.add_constant(var)  
                model = sm.OLS(electricity,var).fit()
                predictions = model.predict(var)
                result.append([df["Date"].iloc[j],model.rsquared,model.params['const'],model.params[v1],model.pvalues[v1],model.params[v2],model.pvalues[v2]])
                df_temp = pd.DataFrame(data=result, columns=result_title) 
            df_results = pd.merge(df_results, df_temp, on='Date')

        else:
            v1 = variables_list[i][0]
            v2 = variables_list[i][1]
            v3 = variables_list[i][2]
            result_title = ['Date',"R-Square"+str(i), "Intercept"+str(i),str(v1)+"Co-eff"+str(i),str(v1)+"p-value"+str(i),str(v2)+"Co-eff"+str(i),str(v2)+"p-value"+str(i),str(v3)+"Co-eff"+str(i),str(v3)+"p-value"+str(i)]

            for j in range(0,rows-12):

                #choose electricity and the variables
                electricity=df["Elect (MMBTU)"][j:j+12]
                var = df[variables_list[i]][j:j+12] 
                var = sm.add_constant(var)  
                model = sm.OLS(electricity,var).fit()
                predictions = model.predict(var)
                result.append([df["Date"].iloc[j],model.rsquared,model.params['const'],model.params[v1],model.pvalues[v1],model.params[v2],model.pvalues[v2],model.params[v3],model.pvalues[v3]])
                df_temp = pd.DataFrame(data=result, columns=result_title) 
            df_results = pd.merge(df_results, df_temp, on='Date')

#----------------------------------------------------------------------
#Add months for reference 
df_results["Months"]=0
for i in range(0,len(df_results.index)):
    df_results["Months"][i]=df_results["Date"].iloc[i].month
    
#---------------------------------------------------------------------

#Adding model qualifiation criterias - taking to long to run in python, probably inefficient coding

rows = len(df.index)-1
col= len(variables_list)
for i in range(0,col):
    df_results['Model'+str(i)]=0
    
    if len(variables_list[i]) == 1:
        v1 = variables_list[i][0]
        
        for j in range(0,rows-12):
            if(df_results["R-Square"+str(i)][j]>0.5 and df_results[str(v1)+"p-value"+str(i)][j]<0.2):
                df_results.loc[:,("Model"+str(i))][j] = "Pass"
            
            else:
               df_results.loc[:,("Model"+str(i))][j] = "Fail"
    
    else:
        if len(variables_list[i]) == 2:
            v1 = variables_list[i][0]
            v2 = variables_list[i][1]

            for j in range(0,rows-12):
                if(df_results["R-Square"+str(i)][j]>0.5 and df_results[str(v1)+"p-value"+str(i)][j]<0.2 and df_results[str(v2)+"p-value"+str(i)][j]<0.2):
                    df_results.loc[:,("Model"+str(i))][j] = "Pass"
               
                else:
                   df_results.loc[:,("Model"+str(i))][j] = "Fail"
                
        else:
            v1 = variables_list[i][0]
            v2 = variables_list[i][1]
            v3 = variables_list[i][2]
            
            for j in range(0,rows-12):
                if(df_results["R-Square"+str(i)][j]>0.5 and df_results[str(v1)+"p-value"+str(i)][j]<0.2 and df_results[str(v2)+"p-value"+str(i)][j]<0.2 and df_results[str(v3)+"p-value"+str(i)][j]<0.2):
                    df_results.loc[:,("Model"+str(i))][j] = "Pass"
               
                else:
                   df_results.loc[:,("Model"+str(i))][j] = "Fail"

#-----------------------------------------------------------------------
#plot the sliding R-Square graph based on user input - here plotting for 3-variable 
rows = len(df_results.index)
months = range(1,rows+1)
fig = plt.figure(figsize=(15,8))
    
plot1 = fig.add_subplot(2,2,1)
plot1.set_xlabel("Month")
plot1.set_ylabel("R- Square")
plot1.set_title("Electricity")
plot1.set_ylim([0,1])

plot1.plot(months, df_results["R-Square6"], color='green', linestyle='dashed', marker='o',markerfacecolor='blue', markersize=4)

plt.show() 

#-----------------------------------------------------------------------------
# Features to be added

# the testing of the model based on SEP criterias and qualifying it ; failed models will be differentiated in the graph 
# % Savings to be calculated and needs to be added to graph and as seperate table output 
# Ability to handle different number of energy sources and variables 









